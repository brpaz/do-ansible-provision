name: CI

on: [push, pull_request]

env:
  TEST_IMAGE_NAME: do-ansible-provision:${{ github.sha }}
  PROD_IMAGE_NAME: brpaz/do-ansible-provision

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: brpaz/hadolint@master

  build:
    runs-on: ubuntu-latest
    needs: ["lint"]
    steps:
      - uses: actions/checkout@v1
      - name: Build Docker image
        run: docker build -t $TEST_IMAGE_NAME

      - name: Save image
        run: docker save -o image.tar $TEST_IMAGE_NAME

      - name: Upload image artifact
        uses: actions/upload-artifact@master
        with:
          name: image
          path: image.tar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v1
      - name: Pull Image artifact
        uses: actions/download-artifact@master
        with:
          name: image
      - name: Load image into docker
        run: docker load -i image/image.tar

      - name: Get Image name
        id: image_name
        run: echo "##[set-output name=image;]$(echo $TEST_IMAGE_NAME)"

      - uses: brpaz/structure-tests@master
        with:
          image: ${{steps.image_name.outputs.image}}

  publish-latest:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Pull Image artifact
        uses: actions/download-artifact@master
        with:
          name: image

      - name: Load image into docker
        run: docker load -i image/image.tar

      - name: Push image to Docker registry (latest)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker tag $TEST_IMAGE_NAME $PROD_IMAGE_NAME:latest 
          docker push $PROD_IMAGE_NAME:latest

  publish-tag:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "10.x"

      - name: Pull Image artifact
        uses: actions/download-artifact@master
        with:
          name: image
      - name: Load image into docker
        run: docker load -i image/image.tar

      - name: Semantic release
        run: |
          npm install -g semantic-release @iteratec/semantic-release-docker
          semantic-release
        env:
          DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
